<?php

/**
 * @file
 * SURFconext authentication module for Drupal.
 *
 * Based on the simplesamlphp_auth module by Steve Moitozo (geekwisdom)
 * http://drupal.org/user/1662
 */

/**
 * Implements hook_menu().
 */
function surfconext_menu() {
  $items = array();

  $items['admin/config/people/surfconext'] = array(
    'title' => 'SURFconext settings',
    'description' => 'Control the various settings of SURFconext federated login.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('surfconext_settings_form'),
    'access arguments' => array('administer surfconext'),
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
  );

  $items['user/login/surfconext'] = array(
    'title' => 'Log in',
    'access callback' => 'user_is_anonymous',
    'page callback' => '_surfconext_login',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function surfconext_theme() {
  return array(
    'surfconext_login_link' => array(
      'file' => 'surfconext.theme.inc',
      'variables' => array(),
    ),
    'surfconext_info' => array(
      'file' => 'surfconext.theme.inc',
      'variables' => array(),
    ),
  );
}

/**
 * Implements hook_mediamosa_ck_acl_alter.
 *
 * @param $acl
 *   Array contains the basic ACL settings for viewer;
 *  - acl_domain
 *    The domain of the user.
 *  - acl_realm
 *    Realm information of the user.
 *  - acl_user_id
 *    The current user.
 *  - acl_group_id[]
 *    Array of group ids.
 *
 */
function surfconext_mediamosa_ck_acl_alter(&$acl, $type) {

  // Set realm.

  // Get the SURFconext instance.
  $surfconext = surfconext::get();
  if ($surfconext) {
    // Get unique ID which we can use as realm.
    $realm = $surfconext->getAttibute_used_for_realm();
    if (!empty($realm)) {
      $acl['acl_realm'] = $realm;
    }
  }
}

/**
 * Implements hook_mediamosa_acl_alter.
 *
 * @param $user_link
 *   The user_link to change.
 */
function surfconext_mediamosa_sb_theme_user_url_alter(&$user_link) {
  $user_link = 'user/login/surfconext';
}

/**
 * Implements hook_admin_paths().
 */
function surfconext_admin_paths() {
  return array('admin/config/people/surfconext' => TRUE);
}

/**
 * Implements hook_help().
 */
function surfconext_help($path, $arg) {
  switch ($path) {
    case 'admin/config/people/surfconext':
      return t('<p>This module allows users to login using SURFconext.</p>');
  }
}

/**
 * Implements hook_permission().
 */
function surfconext_permission() {
  return array(
    'administer surfconext' => array(
      'title' => t('Administer SURFconext'),
      'description' => t('Warning: Give to trusted roles only; this permission has security implications.'),
    ),
  );
}

/**
 * Implements hook_cron().
 */
function surfconext_cron() {
  // Call our cron for surfconext.
  surfconext::cron_surfconext();
}

/**
 * Implements hook_init().
 */
function surfconext_init() {

  // Get the SURFconext instance.
  $surfconext = surfconext::get();
  if ($surfconext) {
    // Init SURFconext.
    $surfconext->init();
  }
}

/**
 * Implements hook_user_logout().
 */
function surfconext_user_logout($account) {

  // Get the SURFconext instance.
  $surfconext = surfconext::get();
  if ($surfconext) {
    // Init SURFconext.
    $surfconext->drupal_logoff($account);
  }
}

/**
 * Implements settings for the module.
 *
 * @see surfconext_settings_form_validate()
 */
function surfconext_settings_form() {

  // @todo: move to requirements hook.
  global $_surfconext_saml_version;

  if (!empty($_surfconext_saml_version )) {
    $ver = explode('.', $_surfconext_saml_version);
    if ( !($ver[0] >= 1 && $ver[1] >= 5) ) {
      drupal_set_message(t("Please upgrade SimpleSAMLphp. You are using %ssp_version", array('%ssp_version' => $_surfconext_saml_version)), 'warning');
    }
  }

  $form['simplesaml'] = array(
    '#type' => 'fieldset',
    '#title' => 'SimpleSAML settings',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['simplesaml']['surfconext_simplesaml_basedir'] = array(
    '#type' => 'textfield',
    '#title' => t('Installation directory'),
    '#default_value' => surfconext::get_simplesaml_basedir(),
    '#description' => t("The base directory of simpleSAMLphp library. Absolute path with no trailing slash. Default: '/var/simplesamlphp'."),
    '#required' => TRUE,
  );

  $form['simplesaml']['surfconext_authsource'] = array(
    '#type' => 'textfield',
    '#title' => t('Autenticaton source for this SP'),
    '#default_value' => variable_get('surfconext_authsource', 'default-sp'),
    '#description' => t("The name of the source to use from /var/simplesamlphp/config/authsources.php. Default: 'default-sp'."),
    '#required' => TRUE,
  );

  $form['surfconext'] = array(
    '#type' => 'fieldset',
    '#title' => 'SURFconext settings',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['surfconext']['surfconext_metadata_idp_url'] = array(
    '#type' => 'textfield',
    '#title' => t('SURFconext IdP metadata URL'),
    '#default_value' => surfconext::get_surfconext_metadata_idp_url(),
    '#description' => t("Enter the URL of the IdP metadata provider. Default: 'https://engine.surfconext.nl/authentication/idp/metadata'."),
    '#required' => TRUE,
  );

  $form['surfconext']['surfconext_metadata_idp_filename'] = array(
    '#type' => 'textfield',
    '#title' => t('SURFconext IdP metadata file location'),
    '#default_value' => surfconext::get_surfconext_metadata_idp_filename(),
    '#description' => t("This is the location where the file of the SURFconext IdP metadata is saved. Current real path location: '@realpath'. Default: 'private://saml20-idp-remote.php'.", array('@realpath' => drupal_realpath(surfconext::get_surfconext_metadata_idp_filename()))),
    '#required' => TRUE,
  );

  $form['enable'] = array(
    '#type' => 'fieldset',
    '#title' => 'Master switch',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['enable']['surfconext_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable authentication via SURFconext'),
    '#default_value' => surfconext::is_enabled(),
    '#description' => t('When enabling locks you out of Drupal, the Adminstrator (user 1) can always bypass the lock and disable SURFconext again.'),
  );

  $form['#validate'][] = 'surfconext_settings_form_validate';

  return system_settings_form($form);
}

/**
 * Validate settings form.
 *
 * @see surfconext_settings_form()
 */
function surfconext_settings_form_validate($form, &$form_state) {
  // Check if the IdP file is writable.
  $surfconext_metadata_idp_filename = $form_state['values']['surfconext_metadata_idp_filename'];

  // Is the location of the IdP file writeable?
  if (!empty($surfconext_metadata_idp_filename) && !is_writable(dirname(drupal_realpath($surfconext_metadata_idp_filename)))) {
    drupal_set_message(t("Warning: the location of the IdP metadata file '@file' is not writable. If the file is located under private://, then check the file settings for the 'Private file system path' !here.", array('@file' => drupal_realpath($surfconext_metadata_idp_filename), '!here' => l(t('here'), 'admin/config/media/file-system'))), 'error');
  }
  else {
    // Remove the last update time so file is pulled again.
    variable_del('surfconext_metadata_ipd_last_update');
  }
}

/**
 * Implements hook_form_alter().
 */
function surfconext_form_alter(&$form, $form_state, $form_id) {

  // Must be enabled.
  if (!surfconext::is_enabled()) {
    return;
  }

  if ($form_id == 'user_login_block') {
    $link =  l('Federated Log In', 'saml_login');
    $links = $form['links']['#markup'];
    $links = str_replace('</ul>', '<li class="saml">' . $link . '</li></ul>', $links);
    $form['links']['#markup'] = $links;
  }

  if ($form_id == 'user_account_form') {
    $link =  l('Federated Log In', 'saml_login');
    $links = $form['links']['#markup'];
    $links = str_replace('</ul>', '<li class="saml">' . $link . '</li></ul>', $links);
    $form['links']['#markup'] = $links;
  }
}

/**
 * Implements hook_block_info().
 */
function surfconext_block_info() {
  return array(
    'surfconext_login_link' => array(
      'info' => t('SURFconext login'),
      'cache' => DRUPAL_NO_CACHE,
    ),
    'surfconext_info' => array(
      'info' => t('SURFconext info'),
      'cache' => DRUPAL_NO_CACHE,
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function surfconext_block_view($delta = '') {

  if (!surfconext::is_enabled()) {
    // Exit without executing.
    return;
  }

  $block = array();

  switch ($delta) {
    case 'surfconext_login_link':
      $block = array(
        'subject' => t('SURFconext login'),
        'content' => array(
          '#theme' => 'surfconext_login_link'
        ),
      );
      break;

    case 'surfconext_info':
      $block = array(
        'subject' => t('SURFconext authentication info'),
        'content' => array(
          '#theme' => 'surfconext_info'
        ),
      );
      break;
  }

  return $block;
}

/**
 * Show the SURFconext page.
 */
function _surfconext_login() {
  // Get the SURFconext instance.
  $surfconext = surfconext::get();
  if ($surfconext) {
    // Show login page SURFconext.
    $surfconext->login();
  }
}
